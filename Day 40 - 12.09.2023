--Ingest streaming data using Azure Streaming Analytics and Azure Synapse Analytics

Azure Stream Analytics provides a real-time data processing engine that you can use to ingest streaming event data into Azure
Synapse Analytics for further analysis and reporting.


https://learn.microsoft.com/en-gb/training/modules/ingest-streaming-data-use-azure-stream-analytics-synapse/


-- Stream ingestion scenarios

Azure Synapse provides multiple ways to analyze large volume data. Two of the most common approaches to large-scale data analytics are:

1) Data Warehouses - relational databases optimized for distributed storage and query processesing. Data is stored in tables and queries using SQL.

2) Data lakes - distributed file storage in which data is stored as files that can be processed and queried using multiple runtimes, including Apache Spark and SQL.



-- Data lake in Azure Synapse Analytics




When ingesting real-time data into a data lake, your Azure Stream Analytics query must write its results to an 
output that references the location in the Azure Data Lake Gen2 storage container where you want to save the data files. 
Data analysts, engineers, and scientists can then process and query the files in the data lake by running code in an Apache Spark pool, 
or by running SQL queries using a serverless SQL pool.


-- Configure inputs and outputs

All Azure Stream Analytics job include at least one input and output.

In most cases, inputs reference sources of streaming data (though you can also define inputs for static reference data to augment the streamed event data). 

Outputs determine where the results of the stream processing query will be sent. 


-- Define a query to select, filter, and aggregate data

1) SELECTING INPUT FIELDS

##SQL

SELECT
    EventEnqueuedUtcTime AS ReadingTime,
    SensorID,
    ReadingValue
INTO
    [synapse-output]
FROM
    [streaming-input] TIMESTAMP BY EventEnqueuedUtcTime

2) Filtering Event Data

SELECT
    EventEnqueuedUtcTime AS ReadingTime,
    SensorID,
    ReadingValue
INTO
    [synapse-output]
FROM
    [streaming-input] TIMESTAMP BY EventEnqueuedUtcTime
WHERE ReadingValue < 0

3) Aggregating events over temporal windows

SELECT
    DateAdd(second, -60, System.TimeStamp) AS StartTime,
    System.TimeStamp AS EndTime,
    SensorID,
    MAX(ReadingValue) AS MaxReading
INTO
    [synapse-output]
FROM
    [streaming-input] TIMESTAMP BY EventEnqueuedUtcTime
GROUP BY SensorID, TumblingWindow(second, 60)
HAVING COUNT(*) >= 1


